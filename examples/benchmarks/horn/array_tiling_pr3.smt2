(set-logic HORN)
(declare-fun inv ((Array Int Int) Int Int Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int))
         (i Int)
         (CC Int)
         (val1 Int)
         (val2 Int)
         (val3 Int)
         (minval Int))
  (! (=> (and (> CC 0) (= val1 1) (= val2 3) (= val3 7) (= i 1))
         (inv a i CC val1 val2 val3 minval))
     :weight 0)))
(assert (forall ((a (Array Int Int))
         (a1 (Array Int Int))
         (a2 (Array Int Int))
         (i Int)
         (a3 (Array Int Int))
         (i1 Int)
         (CC Int)
         (val1 Int)
         (val2 Int)
         (val3 Int)
         (minval Int))
  (! (let ((a!1 (ite (<= minval val3)
                     (store a (- (* 3 i) 3) val3)
                     (store a (- (* 3 i) 3) 0)))
           (a!2 (ite (<= minval val2)
                     (store a1 (- (* 3 i) 2) val2)
                     (store a1 (- (* 3 i) 2) 0)))
           (a!3 (ite (<= minval val1)
                     (store a2 (- (* 3 i) 1) val1)
                     (store a2 (- (* 3 i) 1) 0))))
       (=> (and (inv a i CC val1 val2 val3 minval)
                (<= i (* 1 CC))
                (= i1 (+ i 1))
                (= a1 a!1)
                (= a2 a!2)
                (= a3 a!3))
           (inv a3 i1 CC val1 val2 val3 minval)))
     :weight 0)))
(assert (forall ((val1 Int)
         (val2 Int)
         (val3 Int)
         (i Int)
         (CC Int)
         (minval Int)
         (a (Array Int Int))
         (i1 Int))
  (! (let ((a!1 (not (or (<= minval (select a i1)) (= (select a i1) 0)))))
     (let ((a!2 (and (inv a i CC val1 val2 val3 minval)
                     (not (<= i (* 1 CC)))
                     (<= 0 i1)
                     (< i1 (* 3 CC))
                     a!1)))
       (=> a!2 fail)))
     :weight 0)))
(assert (not fail))
(check-sat)
