(set-logic HORN)
(declare-fun inv ((Array Int Int) (Array Int Int) Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (c (Array Int Int)) (N Int))
  (! (inv a (store c 0 0) 1 N) :weight 0)))
(assert (forall ((c (Array Int Int))
         (i Int)
         (a (Array Int Int))
         (c1 (Array Int Int))
         (i1 Int)
         (N Int))
  (! (let ((a!1 (store c i (+ (select c (- i N)) (select a i)))))
     (let ((a!2 (ite (< i N) (store c i (select c (- i 1))) a!1)))
       (=> (and (inv a c i N) (< i (* 2 N)) (= c1 a!2) (= i1 (+ i 1)))
           (inv a c1 i1 N))))
     :weight 0)))
(assert (forall ((i Int) (N Int) (c (Array Int Int)) (a (Array Int Int)) (i1 Int))
  (! (let ((a!1 (and (inv a c i N)
                     (>= i (* 2 N))
                     (<= N i1)
                     (< i1 (* 2 N))
                     (not (= (select c i1) (select a i1))))))
       (=> a!1 fail))
     :weight 0)))
(assert (not fail))
(check-sat)
