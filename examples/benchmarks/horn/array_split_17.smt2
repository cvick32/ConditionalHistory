(set-logic HORN)
(declare-fun inv ((Array Int Int) Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (N Int)) (! (inv a 0 N) :weight 0)))
(assert (forall ((a (Array Int Int)) (i Int) (a1 (Array Int Int)) (i1 Int) (N Int))
  (! (let ((a!1 (= (ite (= 0 (mod i 2)) (store a i (- 1)) (store a i 1)) a1)))
       (=> (and (inv a i N) (< i (* 2 N)) a!1 (= i1 (+ i 1))) (inv a1 i1 N)))
     :weight 0)))
(assert (forall ((i Int) (N Int) (a (Array Int Int)) (i1 Int))
  (! (let ((a!1 (= (+ (select a i1) (select a (+ i1 1))) 0)))
       (=> (and (inv a i N)
                (>= i (* 2 N))
                (<= 0 i1)
                (< (+ i1 1) (* 2 N))
                (not a!1))
           fail))
     :weight 0)))
(assert (not fail))
(check-sat)
