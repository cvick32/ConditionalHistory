(set-logic HORN)
(declare-fun inv ((Array Int Int) (Array Int Int) Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (b (Array Int Int)) (min Int) (max Int) (N Int))
  (! (=> (> N 0) (inv a b min max 0 N)) :weight 0)))
(assert (forall ((min Int)
         (max Int)
         (b (Array Int Int))
         (i Int)
         (a (Array Int Int))
         (b1 (Array Int Int))
         (min1 Int)
         (max1 Int)
         (i1 Int)
         (N Int))
  (! (let ((a!1 (ite (= i 0)
                     (select a i)
                     (ite (<= min (select a i)) min (select a i))))
           (a!2 (ite (= i 0)
                     (select a i)
                     (ite (>= max (select a i)) max (select a i)))))
     (let ((a!3 (and (inv a b min max i N)
                     (< i (* 2 N))
                     (= min1 a!1)
                     (= max1 a!2)
                     (= b1 (ite (< i N) (store b i min1) (store b i max1)))
                     (= i1 (+ i 1)))))
       (=> a!3 (inv a b1 min1 max1 i1 N))))
     :weight 0)))
(assert (forall ((a (Array Int Int))
         (min Int)
         (max Int)
         (i Int)
         (b (Array Int Int))
         (N Int))
  (! (let ((a!1 (<= (select b 0) (select b (- (* 2 N) 1)))))
       (=> (and (inv a b min max i N) (>= i (* 2 N)) (not a!1)) fail))
     :weight 0)))
(assert (not fail))
(check-sat)
