(set-logic HORN)
(declare-fun inv ((Array Int Int) (Array Int Int) Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (acopy (Array Int Int)) (S Int))
  (! (=> (> S 1) (inv a acopy 0 S)) :weight 0)))
(assert (forall ((acopy (Array Int Int))
         (acopy1 (Array Int Int))
         (i Int)
         (a (Array Int Int))
         (acopy2 (Array Int Int))
         (i1 Int)
         (S Int))
  (! (let ((a!1 (store acopy (- (* 2 S) (+ i 1)) (select a (- (* 2 S) (+ i 1))))))
     (let ((a!2 (and (inv a acopy i S)
                     (< i S)
                     (= a!1 acopy1)
                     (= (store acopy1 i (select a i)) acopy2)
                     (= i1 (+ i 1)))))
       (=> a!2 (inv a acopy2 i1 S))))
     :weight 0)))
(assert (forall ((i Int) (S Int) (acopy (Array Int Int)) (a (Array Int Int)) (i1 Int))
  (! (let ((a!1 (and (inv a acopy i S)
                     (not (< i S))
                     (<= 0 i1)
                     (< i1 (* 2 S))
                     (not (= (select acopy i1) (select a i1))))))
       (=> a!1 fail))
     :weight 0)))
(assert (not fail))
(check-sat)
