(set-logic HORN)
(declare-fun inv ((Array Int Int) (Array Int Int) (Array Int Int) Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (b (Array Int Int)) (c (Array Int Int)) (N Int))
  (! (inv (store a 0 0) b c 1 N) :weight 0)))
(assert (forall ((a (Array Int Int))
         (i Int)
         (a1 (Array Int Int))
         (b (Array Int Int))
         (c (Array Int Int))
         (i1 Int)
         (N Int))
  (! (let ((a!1 (store a i (+ (select a (- i N)) (select b i) (select c i)))))
     (let ((a!2 (ite (< i N) (store a i (select a (- i 1))) a!1)))
       (=> (and (inv a b c i N) (< i (* 2 N)) (= a1 a!2) (= i1 (+ i 1)))
           (inv a1 b c i1 N))))
     :weight 0)))
(assert (forall ((i Int)
         (N Int)
         (a (Array Int Int))
         (b (Array Int Int))
         (c (Array Int Int))
         (i1 Int))
  (! (let ((a!1 (not (= (select a i1) (+ (select b i1) (select c i1))))))
     (let ((a!2 (and (inv a b c i N)
                     (not (< i (* 2 N)))
                     (<= N i1)
                     (< i1 (* 2 N))
                     a!1)))
       (=> a!2 fail)))
     :weight 0)))
(assert (not fail))
(check-sat)
