(set-logic HORN)
(declare-fun inv1
             ((Array Int Int) (Array Int Int) (Array Int Int) Int Int Int)
             Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (b (Array Int Int)) (c (Array Int Int)) (N Int))
  (! (inv1 a b c 0 N 0) :weight 0)))
(assert (forall ((j Int)
         (c (Array Int Int))
         (i Int)
         (a (Array Int Int))
         (b (Array Int Int))
         (c1 (Array Int Int))
         (i1 Int)
         (N Int)
         (j1 Int))
  (! (let ((a!1 (= j1 (ite (= (select a i) (select b i)) (+ j 1) j)))
           (a!2 (= c1 (ite (= (select a i) (select b i)) (store c j i) c))))
       (=> (and (inv1 a b c i N j) (< i N) a!1 a!2 (= i1 (+ i 1)))
           (inv1 a b c1 i1 N j1)))
     :weight 0)))
(assert (forall ((a (Array Int Int))
         (b (Array Int Int))
         (i Int)
         (N Int)
         (j Int)
         (c (Array Int Int))
         (i1 Int))
  (! (let ((a!1 (and (inv1 a b c i N j)
                     (>= i N)
                     (<= 0 i1)
                     (< i1 j)
                     (not (>= (select c i1) i1)))))
       (=> a!1 fail))
     :weight 0)))
(assert (not fail))
(check-sat)
