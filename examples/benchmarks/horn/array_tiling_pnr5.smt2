(set-logic HORN)
(declare-fun inv ((Array Int Int) Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (i Int) (S Int) (defval Int) (fixval Int))
  (=> (and (> S 0) (= defval 0) (= fixval 10) (= i 1))
      (inv a i S defval fixval))))
(assert (forall ((a (Array Int Int))
         (val5 Int)
         (a1 (Array Int Int))
         (val4 Int)
         (a2 (Array Int Int))
         (val3 Int)
         (a3 (Array Int Int))
         (val2 Int)
         (a4 (Array Int Int))
         (i Int)
         (val1 Int)
         (a5 (Array Int Int))
         (i1 Int)
         (S Int)
         (defval Int)
         (fixval Int))
  (let ((a!1 (ite (= defval val5)
                  (store a (- (* 5 i) 5) fixval)
                  (store a (- (* 5 i) 5) val5)))
        (a!2 (ite (= defval val4)
                  (store a1 (- (* 5 i) 4) fixval)
                  (store a1 (- (* 5 i) 4) val4)))
        (a!3 (ite (= defval val3)
                  (store a2 (- (* 5 i) 3) fixval)
                  (store a2 (- (* 5 i) 3) val3)))
        (a!4 (ite (= defval val2)
                  (store a3 (- (* 5 i) 2) fixval)
                  (store a3 (- (* 5 i) 2) val2)))
        (a!5 (ite (= defval val1)
                  (store a4 (- (* 5 i) 1) fixval)
                  (store a4 (- (* 5 i) 1) val1))))
    (=> (and (inv a i S defval fixval)
             (<= i (* 1 S))
             (= i1 (+ i 1))
             (= a1 a!1)
             (= a2 a!2)
             (= a3 a!3)
             (= a4 a!4)
             (= a5 a!5))
        (inv a5 i1 S defval fixval)))))
(assert (forall ((fixval Int) (i Int) (S Int) (a (Array Int Int)) (i1 Int) (defval Int))
  (let ((a!1 (not (not (= (select a i1) defval)))))
  (let ((a!2 (and (inv a i S defval fixval)
                  (not (<= i (* 1 S)))
                  (<= 0 i1)
                  (< i1 (* 5 S))
                  a!1)))
    (=> a!2 fail)))))
(assert (not fail))
(check-sat)
