(set-logic HORN)
(declare-fun inv1 ((Array Int Int) Int Int Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((A (Array Int Int)) (N Int)) (! (inv1 A 0 0 0 0 0 N) :weight 0)))
(assert (forall ((A (Array Int Int))
         (d Int)
         (i Int)
         (a Int)
         (b Int)
         (c Int)
         (A1 (Array Int Int))
         (i1 Int)
         (a1 Int)
         (b1 Int)
         (c1 Int)
         (d1 Int)
         (N Int))
  (! (let ((a!1 (store (store (store A i (+ i a)) (+ i 1) (+ i b))
                       (+ i 2)
                       (+ i c))))
     (let ((a!2 (and (inv1 A i a b c d N)
                     (< i N)
                     (= (store a!1 (+ i 3) (+ i d)) A1)
                     (= i1 (+ i 4))
                     (= a1 (+ i 1))
                     (= b1 (+ a 1))
                     (= c1 (+ b 1))
                     (= d1 (+ c 1)))))
       (=> a!2 (inv1 A1 i1 a1 b1 c1 d1 N))))
     :weight 0)))
(assert (forall ((a Int)
         (b Int)
         (c Int)
         (d Int)
         (i Int)
         (N Int)
         (A (Array Int Int))
         (i1 Int))
  (! (let ((a!1 (and (inv1 A i a b c d N)
                     (>= i N)
                     (<= 0 i1)
                     (< i1 N)
                     (not (>= (select A i1) 0)))))
       (=> a!1 fail))
     :weight 0)))
(assert (not fail))
(check-sat)
