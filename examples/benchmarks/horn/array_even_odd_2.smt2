(set-logic HORN)
(declare-fun inv ((Array Int Int) (Array Int Int) (Array Int Int) Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (b (Array Int Int)) (c (Array Int Int)) (N Int))
  (! (inv a b c 0 N) :weight 0)))
(assert (forall ((b (Array Int Int))
         (c (Array Int Int))
         (i Int)
         (a (Array Int Int))
         (b1 (Array Int Int))
         (c1 (Array Int Int))
         (i1 Int)
         (N Int))
  (! (let ((a!1 (= (ite (= (mod i 2) 0) (store b i (select a i)) b) b1))
           (a!2 (= (ite (= (mod i 2) 0) c (store c i (select a i))) c1)))
       (=> (and (inv a b c i N) (< i N) a!1 a!2 (= i1 (+ i 1)))
           (inv a b1 c1 i1 N)))
     :weight 0)))
(assert (forall ((i Int)
         (N Int)
         (b (Array Int Int))
         (a (Array Int Int))
         (c (Array Int Int))
         (i1 Int))
  (! (let ((a!1 (not (or (= (select a i1) (select b i1))
                         (= (select a i1) (select c i1))))))
       (=> (and (inv a b c i N) (>= i N) (<= 0 i1) (< i1 N) a!1) fail))
     :weight 0)))
(assert (not fail))
(check-sat)
