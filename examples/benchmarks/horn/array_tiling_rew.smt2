(set-logic HORN)
(declare-fun inv ((Array Int Int) Int Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (i Int) (S Int) (val1 Int) (val2 Int) (low Int))
  (! (=> (and (> S 1) (= val1 0) (= val2 3) (= low 2) (= i 0))
         (inv a i S val1 val2 low))
     :weight 0)))
(assert (forall ((a (Array Int Int))
         (a1 (Array Int Int))
         (i Int)
         (a2 (Array Int Int))
         (i1 Int)
         (S Int)
         (val1 Int)
         (val2 Int)
         (low Int))
  (! (let ((a!1 (= a1 (ite (< (+ i 1) S) (store a (+ i 1) val1) a))))
       (=> (and (inv a i S val1 val2 low)
                (< i S)
                (= i1 (+ i 1))
                a!1
                (= a2 (store a1 i val2)))
           (inv a2 i1 S val1 val2 low)))
     :weight 0)))
(assert (forall ((val1 Int)
         (val2 Int)
         (i Int)
         (S Int)
         (low Int)
         (a (Array Int Int))
         (i1 Int))
  (! (let ((a!1 (and (inv a i S val1 val2 low)
                     (not (< i S))
                     (<= 0 i1)
                     (< i1 S)
                     (not (<= low (select a i1))))))
       (=> a!1 fail))
     :weight 0)))
(assert (not fail))
(check-sat)
