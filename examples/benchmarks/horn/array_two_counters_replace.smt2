(set-logic HORN)
(declare-fun inv ((Array Int Int) Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((a (Array Int Int)) (N Int)) (! (inv a 0 (- N 1) N) :weight 0)))
(assert (forall ((a (Array Int Int))
         (a1 (Array Int Int))
         (i Int)
         (j Int)
         (a2 (Array Int Int))
         (i1 Int)
         (j1 Int)
         (N Int))
  (! (let ((a!1 (= a1 (ite (= (select a i) 0) (store a i 5) a)))
           (a!2 (= a2 (ite (= (select a1 j) 1) (store a1 j 3) a1))))
       (=> (and (inv a i j N)
                (< i N)
                (>= j 0)
                a!1
                a!2
                (= i1 (+ i 1))
                (= j1 (- j 1)))
           (inv a2 i1 j1 N)))
     :weight 0)))
(assert (forall ((i Int) (j Int) (N Int) (a (Array Int Int)) (i1 Int))
  (! (let ((a!1 (and (inv a i j N)
                     (not (and (< i N) (>= j 0)))
                     (<= 0 i1)
                     (< i1 N)
                     (or (= (select a i1) 0) (= (select a i1) 1)))))
       (=> a!1 fail))
     :weight 0)))
(assert (not fail))
(check-sat)
