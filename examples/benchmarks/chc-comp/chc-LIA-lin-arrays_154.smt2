(set-logic HORN)
(declare-fun state ((Array Int Int) (Array Int Int) Int Int Bool Int Int) Bool)
(assert (forall ((|A_1| (Array Int Int)) (|B_1| (Array Int Int)) (|C_0| Int) (|D_0| Int) (|.loc.2| Bool) (|E| Int) (|E_1| Int) (|.x.4| Int) (|v_4| Int) (|.x.2| (Array Int Int)) (|.x.3| (Array Int Int)) (|.loc.3| Bool) (|.xtv.1| Int) (|.xpv.1| Int)) (=> (and (and (= C_0 0) (= D_0 10000)) (not .loc.2)) (state |A_1| |B_1| |C_0| |D_0| |.loc.2| |E| |E_1|))))
(assert (forall ((|A_1| (Array Int Int)) (|B_1| (Array Int Int)) (|C_0| Int) (|D_0| Int) (|.loc.2| Bool) (|E| Int) (|E_1| Int) (|.x.4| Int) (|v_4| Int) (|.x.2| (Array Int Int)) (|.x.3| (Array Int Int)) (|.loc.3| Bool) (|.xtv.1| Int) (|.xpv.1| Int)) (=> (and (state |A_1| |B_1| |C_0| |D_0| |.loc.2| |E| |E_1|) (let ((.def_22 (not .loc.2))) (let ((.def_28 (<= D_0 C_0))) (let ((.def_46 (not .def_28))) (let ((.def_50 (= (+ C_0 (* (- 1) v_4)) (- 1)))) (and (= D_0 .x.4) (or (and (or (and .def_22 (and (and (and (= v_4 0) .def_28) (= A_1 .x.2)) (= B_1 .x.3))) (and (= .x.3 (store B_1 C_0 (select A_1 C_0))) (and (= .x.2 (store A_1 C_0 (* (- 1) (select B_1 C_0)))) (and (and .loc.2 .def_46) .def_50)))) .loc.3) (and (= .x.2 (store A_1 C_0 E)) (and (= .x.3 (store B_1 C_0 (* (- 1) E))) (and (not .loc.3) (and .def_50 (and .def_22 .def_46)))))))))))) (state |.x.2| |.x.3| |v_4| |.x.4| |.loc.3| |.xtv.1| |.xpv.1|))))
(assert (forall ((|A_1| (Array Int Int)) (|B_1| (Array Int Int)) (|C_0| Int) (|D_0| Int) (|.loc.2| Bool) (|E| Int) (|E_1| Int) (|.x.4| Int) (|v_4| Int) (|.x.2| (Array Int Int)) (|.x.3| (Array Int Int)) (|.loc.3| Bool) (|.xtv.1| Int) (|.xpv.1| Int)) (=> (state |A_1| |B_1| |C_0| |D_0| |.loc.2| |E| |E_1|) (not (and .loc.2 (and (and (<= D_0 C_0) (and (not (<= E_1 0)) (not (= (select A_1 E_1) (select B_1 E_1))))) (not (<= D_0 E_1))))))))
(check-sat)
