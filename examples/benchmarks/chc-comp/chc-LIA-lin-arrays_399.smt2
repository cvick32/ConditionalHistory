(set-logic HORN)
(declare-fun state (Int Int Int (Array Int Int) Int (Array Int Int) (Array Int Int)) Bool)
(assert (forall ((|F_0| Int) (|E_0| Int) (|D| Int) (|I| (Array Int Int)) (|C| Int) (|F| (Array Int Int)) (|E| (Array Int Int)) (|.xiv.1| Int) (|.xiv.2| Int) (|.xiv.3| Int) (|.xiv.4| (Array Int Int)) (|.xiv.5| Int) (|.xiv.6| (Array Int Int)) (|.xiv.7| (Array Int Int))) (=> (let ((.def_25 (select E C))) (let ((.def_34 (select F C))) (let ((.def_44 (select I D))) (let ((.def_46 (select I C))) (let ((.def_49 (select F D))) (let ((.def_51 (select F F_0))) (let ((.def_53 (select E D))) (let ((.def_55 (select E F_0))) (or (and (not (= (ite (<= 10 D) 0 1) 0)) (and (<= 1 D) (and (= (+ C (* (- 1) .def_25)) (- 40)) (and (not (<= C 0)) (and (= C .def_34) (not (<= 0 D))))))) (and (= (select I F_0) .def_44) (and (not (= .def_46 1)) (and (= .def_34 .def_49) (and (= .def_49 .def_51) (and (= .def_25 .def_53) (and (= (+ F_0 (* (- 1) .def_55)) (- 40)) (and (= .def_53 .def_55) (and (= F_0 .def_51) (and (<= F_0 D) (and (not (<= (+ D (* (- 1) C)) (- 4))) (and (<= D C) (and (or (<= .def_25 C) (not (<= .def_34 C))) (and (= .def_44 .def_46) (and (= (+ F_0 (+ (* 4 E_0) (* (- 1) D))) 0) (and (not (= (ite (<= 10 E_0) 0 1) 0)) (and (<= 1 E_0) (not (<= F_0 0))))))))))))))))))))))))))) (state |F_0| |E_0| |D| |I| |C| |F| |E|))))
(assert (forall ((|F_0| Int) (|E_0| Int) (|D| Int) (|I| (Array Int Int)) (|C| Int) (|F| (Array Int Int)) (|E| (Array Int Int)) (|.xiv.1| Int) (|.xiv.2| Int) (|.xiv.3| Int) (|.xiv.4| (Array Int Int)) (|.xiv.5| Int) (|.xiv.6| (Array Int Int)) (|.xiv.7| (Array Int Int))) (=> (and (state |F_0| |E_0| |D| |I| |C| |F| |E|) false) (state |.xiv.1| |.xiv.2| |.xiv.3| |.xiv.4| |.xiv.5| |.xiv.6| |.xiv.7|))))
(assert (forall ((|F_0| Int) (|E_0| Int) (|D| Int) (|I| (Array Int Int)) (|C| Int) (|F| (Array Int Int)) (|E| (Array Int Int)) (|.xiv.1| Int) (|.xiv.2| Int) (|.xiv.3| Int) (|.xiv.4| (Array Int Int)) (|.xiv.5| Int) (|.xiv.6| (Array Int Int)) (|.xiv.7| (Array Int Int))) (=> (state |F_0| |E_0| |D| |I| |C| |F| |E|) false)))
(check-sat)
