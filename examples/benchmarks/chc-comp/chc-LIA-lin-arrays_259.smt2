(set-logic HORN)
(declare-fun state ((Array Int Int) Int Int (Array Int Int) Int Int Bool Int) Bool)
(assert (forall ((|A_1| (Array Int Int)) (|B_1| Int) (|C_0| Int) (|.y.4| (Array Int Int)) (|.y.5| Int) (|.y.6| Int) (|.loc.7| Bool) (|E_1| Int) (|.x.2| (Array Int Int)) (|.loc.10| Bool) (|v_4| Int) (|.x.3| Int) (|D_0| (Array Int Int)) (|.y.8| Int) (|.y.9| Int) (|.xpv.1| Int)) (=> (and (= B_1 0) (not .loc.7)) (state |A_1| |B_1| |C_0| |.y.4| |.y.5| |.y.6| |.loc.7| |E_1|))))
(assert (forall ((|A_1| (Array Int Int)) (|B_1| Int) (|C_0| Int) (|.y.4| (Array Int Int)) (|.y.5| Int) (|.y.6| Int) (|.loc.7| Bool) (|E_1| Int) (|.x.2| (Array Int Int)) (|.loc.10| Bool) (|v_4| Int) (|.x.3| Int) (|D_0| (Array Int Int)) (|.y.8| Int) (|.y.9| Int) (|.xpv.1| Int)) (=> (and (state |A_1| |B_1| |C_0| |.y.4| |.y.5| |.y.6| |.loc.7| |E_1|) (let ((.def_20 (not .loc.7))) (let ((.def_28 (<= C_0 B_1))) (or (and (and (= A_1 .x.2) .loc.10) (or (and .def_20 (and (and (= v_4 0) .def_28) (= C_0 .x.3))) (and (not (<= .y.6 .y.5)) (and (= (store .y.4 .y.5 (+ (* (- 1) (select A_1 .y.5)) 1)) D_0) (and (= (+ .y.5 (* (- 1) v_4)) (- 1)) (and .loc.7 (= .y.6 .x.3))))))) (and (= .x.2 (store A_1 B_1 1)) (and (= (+ B_1 (* (- 1) .y.8)) (- 1)) (and (= C_0 .y.9) (and (not .loc.10) (and .def_20 (not .def_28)))))))))) (state |.x.2| |.y.8| |.y.9| |D_0| |v_4| |.x.3| |.loc.10| |.xpv.1|))))
(assert (forall ((|A_1| (Array Int Int)) (|B_1| Int) (|C_0| Int) (|.y.4| (Array Int Int)) (|.y.5| Int) (|.y.6| Int) (|.loc.7| Bool) (|E_1| Int) (|.x.2| (Array Int Int)) (|.loc.10| Bool) (|v_4| Int) (|.x.3| Int) (|D_0| (Array Int Int)) (|.y.8| Int) (|.y.9| Int) (|.xpv.1| Int)) (=> (state |A_1| |B_1| |C_0| |.y.4| |.y.5| |.y.6| |.loc.7| |E_1|) (not (and .loc.7 (and (and (<= .y.6 .y.5) (and (not (<= E_1 0)) (not (<= 1 (select .y.4 E_1))))) (not (<= .y.6 E_1))))))))
(check-sat)
