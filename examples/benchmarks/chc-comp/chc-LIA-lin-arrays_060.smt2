(set-logic HORN)
(declare-fun state (Int (Array Int Int) Int Bool Bool Int) Bool)
(assert (forall ((|A_1| Int) (|B_1| (Array Int Int)) (|D_0| Int) (|.loc.6| Bool) (|.loc.7| Bool) (|N_0| Int) (|.loc.11| Bool) (|.loc.12| Bool) (|.y.10| Int) (|.y.9| (Array Int Int)) (|.y.8| Int) (|.xtv.1| Int)) (=> (and (not .loc.7) (not .loc.6)) (state |A_1| |B_1| |D_0| |.loc.6| |.loc.7| |N_0|))))
(assert (forall ((|A_1| Int) (|B_1| (Array Int Int)) (|D_0| Int) (|.loc.6| Bool) (|.loc.7| Bool) (|N_0| Int) (|.loc.11| Bool) (|.loc.12| Bool) (|.y.10| Int) (|.y.9| (Array Int Int)) (|.y.8| Int) (|.xtv.1| Int)) (=> (and (state |A_1| |B_1| |D_0| |.loc.6| |.loc.7| |N_0|) (let ((.def_17 (not .loc.6))) (let ((.def_20 (<= N_0 0))) (let ((.def_25 (select B_1 D_0))) (let ((.def_29 (= (+ N_0 (* (- 1) .def_25)) (- 1)))) (let ((.def_31 (<= .def_25 1))) (let ((.def_48 (not .loc.12))) (let ((.def_53 (= A_1 .y.8))) (and (not .loc.7) (or (or (and (or (and .def_17 .def_20) (and (and .loc.6 .def_29) .def_31)) (and (not .loc.11) (and (not (= N_0 0)) .loc.12))) (and (and (not .def_20) (and (= (store B_1 .y.10 N_0) .y.9) (and (and .def_17 .loc.11) .def_48))) .def_53)) (and (= D_0 .y.10) (and (not .def_31) (and (= .y.9 (store B_1 D_0 N_0)) (and .def_53 (and .def_48 (and .def_29 (and .loc.6 .loc.11))))))))))))))))) (state |.y.8| |.y.9| |.y.10| |.loc.11| |.loc.12| |.xtv.1|))))
(assert (forall ((|A_1| Int) (|B_1| (Array Int Int)) (|D_0| Int) (|.loc.6| Bool) (|.loc.7| Bool) (|N_0| Int) (|.loc.11| Bool) (|.loc.12| Bool) (|.y.10| Int) (|.y.9| (Array Int Int)) (|.y.8| Int) (|.xtv.1| Int)) (=> (state |A_1| |B_1| |D_0| |.loc.6| |.loc.7| |N_0|) (not (and .loc.7 (not .loc.6))))))
(check-sat)
