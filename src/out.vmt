(declare-sort Arr 0)
(declare-sort ArrOfArr 0)
(declare-fun ConstArr (Int) Arr)
(declare-fun Read (Arr Int) Int)
(declare-fun ArrRead (ArrOfArr Int) Arr)
(declare-fun ArrWrite (ArrOfArr Int Arr) ArrOfArr)
(declare-fun Write (Arr Int Int) Arr)
(declare-fun a () Arr)
(declare-fun a_next () Arr)
(define-fun .a () Arr (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun pc () Int)
(declare-fun pc_next () Int)
(define-fun .pc () Int (! pc :next pc_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= pc 1)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(=> (and (< i N) (= pc 1)) (= (Write a i 0) a_next))
(let ((a!1 (= (Write a i (+ j (Read a i))) a_next)))
  (=> (and (< j i) (= pc 2)) a!1))
(let ((a!1 (= (Write a i (+ 1 (Read a i))) a_next)))
  (=> (and (not (< j i)) (= pc 2)) a!1))
(let ((a!1 (and (= pc 2) (not (not (< j i))))))
  (=> a!1 (= a a_next)))
(=> (and (< i N) (= pc 1)) (= i i_next))
(=> (and (< j i) (= pc 2)) (= i i_next))
(=> (and (not (< j i)) (= pc 2)) (= (+ i 1) i_next))
(let ((a!1 (and (= pc 2) (not (not (< j i))))))
  (=> a!1 (= i i_next)))
(=> (and (< i N) (= pc 1)) (= 0 j_next))
(=> (and (< j i) (= pc 2)) (= (+ j 2) j_next))
(=> (and (not (< j i)) (= pc 2)) (= j j_next))
(let ((a!1 (and (= pc 2) (not (not (< j i))))))
  (=> a!1 (= j j_next)))
(= N N_next)
(=> (and (< i N) (= pc 1)) (= 2 pc_next))
(=> (and (< j i) (= pc 2)) (= 2 pc_next))
(=> (and (not (< j i)) (= pc 2)) (= 1 pc_next))
(let ((a!1 (and (= pc 2) (not (not (< j i))))))
  (=> a!1 (= pc pc_next)))
(= Z Z_next)
(or (= pc 1) (= pc 2))
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (> (Read a Z) 0)))))
  (=> (and (= pc 1) (not (< i N)) (> Z 0) (< Z N)) (and a!1)))
) :invar-property 0))

