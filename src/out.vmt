(declare-sort Arr 0)
(declare-sort ArrOfArr 0)
(declare-fun ConstArr (Int) Arr)
(declare-fun Read (Arr Int) Int)
(declare-fun ArrRead (ArrOfArr Int) Arr)
(declare-fun ArrWrite (ArrOfArr Int Arr) ArrOfArr)
(declare-fun Write (Arr Int Int) Arr)
(declare-fun b () Arr)
(declare-fun b_next () Arr)
(define-fun .b () Arr (! b :next b_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun a () Arr)
(declare-fun a_next () Arr)
(define-fun .a () Arr (! a :next a_next))
(declare-fun n () Int)
(declare-fun n_next () Int)
(define-fun .n () Int (! n :next n_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(= (Write b i (Read a i)) b_next)
(< i n)
(= (+ i 1) i_next)
(= a a_next)
(= n n_next)
(= Z Z_next)
(= (Read (Write b Z (Read a Z)) Z) (Read a Z))
(let ((a!1 (= (Read (Write b i (Read a i)) Z) (Read b Z))))
  (=> (not (= i Z)) a!1))
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (= (Read a Z) (Read b Z))))))
  (=> (and (>= i n) (> Z 0) (< Z n)) (and a!1)))
) :invar-property 0))

